AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Minimal REST /tickets on API Gateway + Lambda

Parameters:
  ApiName:
    Type: String
    Default: tickets-api
  StageName:
    Type: String
    Default: v1
  ApiKeyValue:
    Type: String
    Default: dev-key-a3-001-1550da9fdf67

Resources:
  # API (REST)
  TicketsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref ApiName
      EndpointConfiguration:
        Types: [EDGE]   
  TicketsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TicketsApi
      ParentId: !GetAtt TicketsApi.RootResourceId
      PathPart: tickets

  # Model & Validator for POST
  TicketModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref TicketsApi
      Name: Ticket
      ContentType: application/json
      Schema:
        $schema: "http://json-schema.org/draft-04/schema#"
        title: Ticket
        type: object
        required: [title]
        properties:
          title:
            type: string
            minLength: 1
          priority:
            type: string
            enum: [LOW, MEDIUM, HIGH]

  BodyValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: body-only
      RestApiId: !Ref TicketsApi
      ValidateRequestBody: true
      ValidateRequestParameters: false

  # GET 
  GetParamsValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: params-only
      RestApiId: !Ref TicketsApi
      ValidateRequestBody: false
      ValidateRequestParameters: true

  # Lambdas (SAM)
  GetTicketFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getTicket-a3
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ../../src/handlers/getTicket/
      MemorySize: 256
      Timeout: 6
      Tracing: Active
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: tickets-api
          POWERTOOLS_METRICS_NAMESPACE: Tickets
          LOG_LEVEL: INFO
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXRayDaemonWriteAccess

  CreateTicketFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createTicket-a3
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: ../../src/handlers/createTicket/
      MemorySize: 256
      Timeout: 6
      Tracing: Active
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: tickets-api
          POWERTOOLS_METRICS_NAMESPACE: Tickets
          LOG_LEVEL: INFO
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSXRayDaemonWriteAccess

  # Log retention
  GetLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetTicketFunction}
      RetentionInDays: 14

  CreateLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CreateTicketFunction}
      RetentionInDays: 14

  # Methods on /tickets
  GetTicketsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TicketsApi
      ResourceId: !Ref TicketsResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestValidatorId: !Ref GetParamsValidator
      RequestParameters:
        method.request.querystring.limit: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTicketFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: "200"

  PostTicketsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TicketsApi
      ResourceId: !Ref TicketsResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      RequestModels:
        application/json: !Ref TicketModel
      RequestValidatorId: !Ref BodyValidator
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTicketFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: "201"

  # OPTIONS (CORS preflight)
  OptionsTicketsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TicketsApi
      ResourceId: !Ref TicketsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,x-api-key'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: "200"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Deployment & Stage
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GetTicketsMethod
      - PostTicketsMethod
      - OptionsTicketsMethod
    Properties:
      RestApiId: !Ref TicketsApi
      Description: A3 initial deployment

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref TicketsApi
      StageName: !Ref StageName
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - ResourcePath: "/tickets"
          HttpMethod: "GET"
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 5
        - ResourcePath: "/tickets"
          HttpMethod: "POST"
          ThrottlingBurstLimit: 5
          ThrottlingRateLimit: 2

  # Permissions (APIGW -> Lambda)
  AllowApiToInvokeGet:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetTicketFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TicketsApi}/*/GET/tickets

  AllowApiToInvokePost:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreateTicketFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TicketsApi}/*/POST/tickets

  # API key + usage plan
  DevApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: ApiStage
    Properties:
      Name: !Sub ${ApiName}-dev-key
      Enabled: true
      Value: !Ref ApiKeyValue
      StageKeys:
        - RestApiId: !Ref TicketsApi
          StageName: !Ref StageName

  DevUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub ${ApiName}-dev-plan
      ApiStages:
        - ApiId: !Ref TicketsApi
          Stage: !Ref ApiStage
      Throttle:
        RateLimit: 2
        BurstLimit: 5
      Quota:
        Limit: 1000
        Period: MONTH

  DevUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref DevApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref DevUsagePlan

Outputs:
  TicketsInvokeUrl:
    Description: Invoke URL for /tickets
    Value: !Sub https://${TicketsApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/tickets
  RestApiId:
    Description: API Gateway REST API Id (for OpenAPI export)
    Value: !Ref TicketsApi
  DevApiKeyValue:
    Description: API key value for x-api-key header (dev)
    Value: !Ref ApiKeyValue
