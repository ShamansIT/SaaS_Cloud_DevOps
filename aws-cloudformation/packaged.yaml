AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A2 - Minimal REST /tickets on API Gateway + Lambda
Parameters:
  ApiName:
    Type: String
    Default: tickets-api
  StageName:
    Type: String
    Default: v1
Resources:
  TicketsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Ref: ApiName
      EndpointConfiguration:
        Types:
        - EDGE
  TicketsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId:
        Ref: TicketsApi
      ParentId:
        Fn::GetAtt:
        - TicketsApi
        - RootResourceId
      PathPart: tickets
  TicketModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId:
        Ref: TicketsApi
      Name: Ticket
      ContentType: application/json
      Schema:
        $schema: http://json-schema.org/draft-04/schema#
        title: Ticket
        type: object
        required:
        - title
        properties:
          title:
            type: string
            minLength: 1
          priority:
            type: string
            enum:
            - LOW
            - MEDIUM
            - HIGH
  BodyValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: body-only
      RestApiId:
        Ref: TicketsApi
      ValidateRequestBody: true
      ValidateRequestParameters: false
  GetTicketFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getTicket-a2
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: s3://serhii-saas-devops-artifacts-eu-west-1/79757bb37a830e9c71b92c4e4a951f51
      MemorySize: 128
      Timeout: 5
      Description: Returns a list of tickets (demo)
  CreateTicketFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createTicket-a2
      Runtime: nodejs20.x
      Handler: index.handler
      CodeUri: s3://serhii-saas-devops-artifacts-eu-west-1/f746835f9fdfa950ea999c76c85f4084
      MemorySize: 128
      Timeout: 5
      Description: Creates a ticket (demo)
  GetTicketsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: TicketsApi
      ResourceId:
        Ref: TicketsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTicketFunction.Arn}/invocations
      MethodResponses:
      - StatusCode: 200
  PostTicketsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: TicketsApi
      ResourceId:
        Ref: TicketsResource
      HttpMethod: POST
      AuthorizationType: NONE
      RequestModels:
        application/json:
          Ref: TicketModel
      RequestValidatorId:
        Ref: BodyValidator
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateTicketFunction.Arn}/invocations
      MethodResponses:
      - StatusCode: 201
  OptionsTicketsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId:
        Ref: TicketsApi
      ResourceId:
        Ref: TicketsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
      MethodResponses:
      - StatusCode: 200
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: true
          method.response.header.Access-Control-Allow-Methods: true
          method.response.header.Access-Control-Allow-Origin: true
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - GetTicketsMethod
    - PostTicketsMethod
    - OptionsTicketsMethod
    Properties:
      RestApiId:
        Ref: TicketsApi
      Description: A2 initial deployment
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: TicketsApi
      StageName:
        Ref: StageName
      DeploymentId:
        Ref: ApiDeployment
  AllowApiToInvokeGet:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: GetTicketFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TicketsApi}/*/GET/tickets
  AllowApiToInvokePost:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: CreateTicketFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TicketsApi}/*/POST/tickets
Outputs:
  TicketsInvokeUrl:
    Description: Invoke URL for /tickets
    Value:
      Fn::Sub: https://${TicketsApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/tickets
